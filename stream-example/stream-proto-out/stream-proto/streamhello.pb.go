// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream-proto/streamhello.proto

package streamhello

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 定义Client发起请求参数
type HelloRequest struct {
	Req                  string               `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	LastUpdate           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_085fd3853485db19, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func (m *HelloRequest) GetLastUpdate() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdate
	}
	return nil
}

// 定义Server返回参数
type HelloReply struct {
	Resp                 string               `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	LastUpdate           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_085fd3853485db19, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func (m *HelloReply) GetLastUpdate() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdate
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "streamhello.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "streamhello.HelloReply")
}

func init() { proto.RegisterFile("stream-proto/streamhello.proto", fileDescriptor_085fd3853485db19) }

var fileDescriptor_085fd3853485db19 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2d, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x87, 0x70, 0x32, 0x52, 0x73, 0x72, 0xf2,
	0xf5, 0xc0, 0x22, 0x42, 0xdc, 0x48, 0x42, 0x52, 0xf2, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa,
	0x60, 0xa9, 0xa4, 0xd2, 0x34, 0xfd, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x02, 0x88,
	0x6a, 0xa5, 0x58, 0x2e, 0x1e, 0x0f, 0x90, 0xca, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21,
	0x01, 0x2e, 0xe6, 0xa2, 0xd4, 0x42, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0xc8,
	0x9a, 0x8b, 0x3b, 0x27, 0xb1, 0xb8, 0x24, 0xbe, 0xb4, 0x20, 0x25, 0xb1, 0x24, 0x55, 0x82, 0x49,
	0x81, 0x51, 0x83, 0xdb, 0x48, 0x4a, 0x0f, 0x62, 0xb0, 0x1e, 0xcc, 0x60, 0xbd, 0x10, 0x98, 0xc1,
	0x41, 0x5c, 0x20, 0xe5, 0xa1, 0x60, 0xd5, 0x4a, 0xb1, 0x5c, 0x5c, 0x50, 0xe3, 0x0b, 0x72, 0x2a,
	0x85, 0x84, 0xb8, 0x58, 0x8a, 0x52, 0x8b, 0x0b, 0xa0, 0xa6, 0x83, 0xd9, 0x14, 0x19, 0x6f, 0xf4,
	0x9c, 0x91, 0x8b, 0x3b, 0x18, 0xec, 0x5d, 0xb0, 0x2d, 0x42, 0x6e, 0x5c, 0x3c, 0xce, 0xc8, 0x7c,
	0x49, 0x3d, 0xe4, 0xf0, 0x41, 0xf6, 0xa8, 0x94, 0x38, 0x36, 0xa9, 0x82, 0x9c, 0x4a, 0x25, 0x06,
	0x0d, 0x46, 0x90, 0x39, 0xc1, 0x14, 0x9b, 0x63, 0xc0, 0x28, 0xe4, 0xc1, 0xc5, 0xe3, 0x42, 0x05,
	0xf7, 0x18, 0x30, 0x3a, 0xf1, 0x46, 0x21, 0xc7, 0x6b, 0x12, 0x1b, 0x38, 0x60, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x9d, 0xff, 0xf6, 0x83, 0x0d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamHelloClient is the client API for StreamHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamHelloClient interface {
	// 定义客户端流服务
	CStreamHello(ctx context.Context, opts ...grpc.CallOption) (StreamHello_CStreamHelloClient, error)
	// 定义服务端流服务
	SStreamHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (StreamHello_SStreamHelloClient, error)
	// 定义双向流服务
	DStreamHello(ctx context.Context, opts ...grpc.CallOption) (StreamHello_DStreamHelloClient, error)
}

type streamHelloClient struct {
	cc *grpc.ClientConn
}

func NewStreamHelloClient(cc *grpc.ClientConn) StreamHelloClient {
	return &streamHelloClient{cc}
}

func (c *streamHelloClient) CStreamHello(ctx context.Context, opts ...grpc.CallOption) (StreamHello_CStreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamHello_serviceDesc.Streams[0], "/streamhello.StreamHello/CStreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamHelloCStreamHelloClient{stream}
	return x, nil
}

type StreamHello_CStreamHelloClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type streamHelloCStreamHelloClient struct {
	grpc.ClientStream
}

func (x *streamHelloCStreamHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamHelloCStreamHelloClient) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamHelloClient) SStreamHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (StreamHello_SStreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamHello_serviceDesc.Streams[1], "/streamhello.StreamHello/SStreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamHelloSStreamHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamHello_SStreamHelloClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type streamHelloSStreamHelloClient struct {
	grpc.ClientStream
}

func (x *streamHelloSStreamHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamHelloClient) DStreamHello(ctx context.Context, opts ...grpc.CallOption) (StreamHello_DStreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamHello_serviceDesc.Streams[2], "/streamhello.StreamHello/DStreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamHelloDStreamHelloClient{stream}
	return x, nil
}

type StreamHello_DStreamHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type streamHelloDStreamHelloClient struct {
	grpc.ClientStream
}

func (x *streamHelloDStreamHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamHelloDStreamHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamHelloServer is the server API for StreamHello service.
type StreamHelloServer interface {
	// 定义客户端流服务
	CStreamHello(StreamHello_CStreamHelloServer) error
	// 定义服务端流服务
	SStreamHello(*HelloRequest, StreamHello_SStreamHelloServer) error
	// 定义双向流服务
	DStreamHello(StreamHello_DStreamHelloServer) error
}

// UnimplementedStreamHelloServer can be embedded to have forward compatible implementations.
type UnimplementedStreamHelloServer struct {
}

func (*UnimplementedStreamHelloServer) CStreamHello(srv StreamHello_CStreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method CStreamHello not implemented")
}
func (*UnimplementedStreamHelloServer) SStreamHello(req *HelloRequest, srv StreamHello_SStreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SStreamHello not implemented")
}
func (*UnimplementedStreamHelloServer) DStreamHello(srv StreamHello_DStreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method DStreamHello not implemented")
}

func RegisterStreamHelloServer(s *grpc.Server, srv StreamHelloServer) {
	s.RegisterService(&_StreamHello_serviceDesc, srv)
}

func _StreamHello_CStreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamHelloServer).CStreamHello(&streamHelloCStreamHelloServer{stream})
}

type StreamHello_CStreamHelloServer interface {
	SendAndClose(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type streamHelloCStreamHelloServer struct {
	grpc.ServerStream
}

func (x *streamHelloCStreamHelloServer) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamHelloCStreamHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamHello_SStreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamHelloServer).SStreamHello(m, &streamHelloSStreamHelloServer{stream})
}

type StreamHello_SStreamHelloServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type streamHelloSStreamHelloServer struct {
	grpc.ServerStream
}

func (x *streamHelloSStreamHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamHello_DStreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamHelloServer).DStreamHello(&streamHelloDStreamHelloServer{stream})
}

type StreamHello_DStreamHelloServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type streamHelloDStreamHelloServer struct {
	grpc.ServerStream
}

func (x *streamHelloDStreamHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamHelloDStreamHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamHello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamhello.StreamHello",
	HandlerType: (*StreamHelloServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CStreamHello",
			Handler:       _StreamHello_CStreamHello_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SStreamHello",
			Handler:       _StreamHello_SStreamHello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DStreamHello",
			Handler:       _StreamHello_DStreamHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream-proto/streamhello.proto",
}
